---
description: 
globs: 
alwaysApply: true
---
# RF Observer Technical Guide

This rule outlines the technical stack and implementation details for RF Observer.

## Frontend Technologies

- **React**: UI framework
- **Tailwind CSS**: Styling
- **socket.io-client**: Real-time communication
- **plotly.js/WebGL**: Visualization components
- **Dark mode + responsive design**
- **UI Design**: See detailed UI specifications in [rf-observer-ui-design](mdc:.cursor/rules/rf-observer-ui-design.mdc)

## Backend Components

- **FastAPI**: Python-based API framework
- **pyrtlsdr**: SDR device integration
- **socket.io (asyncio)**: WebSocket server
- **numpy/scipy**: Signal processing
- **SoapySDR**: Device abstraction layer (future)

## API Endpoints

- `/api/start_scan`, `/api/stop_scan`, `/api/tune/:device_index`, `/api/devices`
- WebSocket: FFT data, burst detection events
- `/api/download_iq/:burst_id`, `/api/fft_data/:fft_data_id`
- Planned: `/audio` endpoint for audio streaming

## Feature Implementation Status

Current status according to [docs/technical_compliance.md](mdc:docs/technical_compliance.md):

- ✅ Spectrum/waterfall visualization
- ✅ Device management
- ✅ FFT processing & analysis
- ✅ IQ data recording
- ❌ Audio streaming (rtl_fm integration)
- ❌ Modulation selection

## Implementation Roadmap

See [docs/implementation_roadmap.md](mdc:docs/implementation_roadmap.md) for the weekly implementation plan:

1. Week 1: Audio streaming implementation
2. Week 2: Spectrum/waterfall optimization
3. Week 3: Device management enhancements
4. Week 4: Signal analysis features
5. Week 5: Documentation and testing

## Deployment

- **Docker**: Containerized services
- **nginx**: Optional reverse proxy
- **PostgreSQL**: Metadata storage
- **File system**: IQ data storage

## Hardware Support

- RTL-SDR (currently supported)
- HackRF One (planned)
- HackRF H4M (planned)
- LimeSDR Mini (planned)

## Development Timeline

- Initial SDR scan & burst detect backend (Week 1)
- WebSocket + React UI integration (Week 2)
- IQ capture, logging, and download support (Week 3)
- Spectrogram viewer (Week 4)
- Multi-device support (Week 5)
- Export to URH / Inspectrum format (Week 6)
- Signal tagging + burst history UI (Week 7)
- ML classifier proof-of-concept (Week 8)
