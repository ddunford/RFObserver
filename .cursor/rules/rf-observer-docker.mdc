---
description: 
globs: 
alwaysApply: true
---
# RF Observer Docker Setup

This rule outlines the Docker implementation for RF Observer.

## Container Architecture

- **Frontend**: React application container
- **Backend**: Python FastAPI container with SDR libraries
- **Database**: PostgreSQL container
- **Reverse Proxy**: nginx container for routing and SSL termination

## Docker Compose Structure

```yaml
# Main services structure
services:
  frontend:
    container_name: rf-observer-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "4444:3000"
    depends_on:
      - backend
    networks:
      - rf_network

  backend:
    container_name: rf-observer-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    privileged: true  # Required for USB device access
    ports:
      - "7001:7001"  # API port
      - "7002:7002"  # WebSocket port
    volumes:
      - ./backend:/app
      - iq_data:/app/data
      - /dev/bus/usb:/dev/bus/usb  # SDR device passthrough
    devices:
      - /dev/bus/usb
    depends_on:
      - database
    networks:
      - rf_network

  database:
    container_name: rf-observer-db
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rfobserver}
      POSTGRES_USER: ${DB_USER:-rfobserver}
      POSTGRES_DB: ${DB_NAME:-rfobserver}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    networks:
      - rf_network

  nginx:
    container_name: rf-observer-nginx
    image: nginx:alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
    ports:
      - "7777:80"
      - "9999:443"
    depends_on:
      - frontend
      - backend
    networks:
      - rf_network
```

The complete Docker configuration is in [docker-compose.yml](mdc:docker-compose.yml), [docker-compose.dev.yml](mdc:docker-compose.dev.yml), and [docker-compose.prod.yml](mdc:docker-compose.prod.yml).

## Device Access

- Uses privileged mode for SDR device access
- Maps USB bus to allow hardware detection
- Additional capabilities: SYS_ADMIN, SYS_RAWIO
- Direct device access through `/dev/bus/usb` and `/dev/rtl_sdr`

## Volume Management

- Persistent storage for IQ data capture files using Docker volumes
- Database volume for metadata storage
- Source code volumes for development

## Development vs Production

- Development profile with hot-reloading
- Production profile with optimized builds
- Separate Dockerfile.dev for development

## Deployment Commands

```bash
# Development startup
docker compose -f docker-compose.yml -f docker-compose.dev.yml up

# Production startup
docker compose -f docker-compose.yml -f docker-compose.prod.yml up -d

# Access logs
docker compose logs -f backend

# Restart development environment 
./restart-dev.sh
```

## Hardware Considerations

- SDR device detection through USB passthrough
- Docker privileged mode required for hardware access
- Environment variables for RTL-SDR debugging and configuration
