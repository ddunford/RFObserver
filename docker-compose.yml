version: '3'

services:
  frontend:
    container_name: rf-observer-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "4444:3000"
    environment:
      - NODE_ENV=development
      - CHOKIDAR_USEPOLLING=true
      - WDS_SOCKET_PORT=0
    depends_on:
      - backend
    networks:
      - rf_network
    restart: unless-stopped

  backend:
    container_name: rf-observer-backend
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    privileged: true  # Required for USB device access
    ports:
      - "7001:7001"  # API port
      - "7002:7002"  # WebSocket port
    volumes:
      - ./backend:/app
      - iq_data:/app/data
      - /dev/bus/usb:/dev/bus/usb  # SDR device passthrough
      - /dev/rtl_sdr:/dev/rtl_sdr  # Direct SDR device node if available
    devices:
      - /dev/bus/usb
    environment:
      - LIBRTLSDR_DEBUG=1
      - PYTHONUNBUFFERED=1
      - LD_LIBRARY_PATH=/usr/local/lib:/usr/lib
      - CORS_ORIGINS=http://localhost:4444,http://localhost:3000,http://frontend:3000,http://localhost
    depends_on:
      - database
    # Add extra privileges for USB access
    cap_add:
      - SYS_ADMIN
      - SYS_RAWIO
    networks:
      - rf_network
    restart: unless-stopped

  database:
    container_name: rf-observer-db
    image: postgres:14
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD:-rfobserver}
      POSTGRES_USER: ${DB_USER:-rfobserver}
      POSTGRES_DB: ${DB_NAME:-rfobserver}
    volumes:
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      - "6666:5432"
    networks:
      - rf_network
    restart: unless-stopped

  nginx:
    container_name: rf-observer-nginx
    image: nginx:alpine
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/html:/usr/share/nginx/html
    ports:
      - "7777:80"
      - "9999:443"
    depends_on:
      - frontend
      - backend
    networks:
      - rf_network
    restart: unless-stopped

volumes:
  iq_data:

networks:
  rf_network:
    driver: bridge 